
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c8  00800100  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001688  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bd  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bcf  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000374  00000000  00000000  000032d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000699  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071f  00000000  00000000  00003cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000043fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	14 e0       	ldi	r17, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3c       	cpi	r26, 0xC8	; 200
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3c       	cpi	r26, 0xC8	; 200
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  9e:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <getChar_>:
 #include <avr/sleep.h>
 #include "ioe.h"
 #include "states.h"

 void delay_ms(int n) {	
	for(int i =0; i < n; ++i)
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 23       	and	r24, r24
  ae:	ec f7       	brge	.-6      	; 0xaa <getChar_+0x4>
  b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <putChar_>:
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	19 f4       	brne	.+6      	; 0xc4 <putChar_+0xe>
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	0e 94 5b 00 	call	0xb6	; 0xb6 <putChar_>
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	85 ff       	sbrs	r24, 5
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <putChar_+0x12>
  ce:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <printm>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <printm+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 5b 00 	call	0xb6	; 0xb6 <putChar_>
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <printm+0xe>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <mymainMenu>:

//MENU OPTIONS
void mymainMenu(void(* currentState)())	{
	uint8_t key;	

	printm("Main Menu:\r\n");
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>
	printm("\t<a> Hello World!\r\n");
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>
	printm("\t<s> Sleep options\r\n");
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>
	printm("\t<d> LED control\r\n");
 10c:	89 e3       	ldi	r24, 0x39	; 57
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>

	key = getChar_();		
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <getChar_>
	switch (key){
 118:	84 36       	cpi	r24, 0x64	; 100
 11a:	69 f0       	breq	.+26     	; 0x136 <mymainMenu+0x42>
 11c:	83 37       	cpi	r24, 0x73	; 115
 11e:	59 f0       	breq	.+22     	; 0x136 <mymainMenu+0x42>
 120:	81 36       	cpi	r24, 0x61	; 97
 122:	29 f4       	brne	.+10     	; 0x12e <mymainMenu+0x3a>
		case 'a':
			printm("\r\nHello World!\r\n");	
 124:	8c e4       	ldi	r24, 0x4C	; 76
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>
			currentState = mymainMenu;
			break;
 12c:	08 95       	ret
		case 'd':
			currentState = ledControl;		
			break;
		default:
			currentState = mymainMenu;
			printm("Error.mymain(): Unavailable option\r\n");	
 12e:	8d e5       	ldi	r24, 0x5D	; 93
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 6b 00 	call	0xd6	; 0xd6 <printm>
 136:	08 95       	ret

00000138 <TC0_FAST_PWM_D_TOP>:
	  //OC1A AND OC1B as outputs for PWM
	  DDRB |= (1<<PB1)|(1<<PB2);

	  TCCR1A = (1<<COM1A1)|(1<<COM1B1);
	  TC1_FAST_PWM_S_TOP();
	  TC1_PRESCALING_64();
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	85 bd       	out	0x25, r24	; 37
 13e:	84 b5       	in	r24, 0x24	; 36
 140:	83 60       	ori	r24, 0x03	; 3
 142:	84 bd       	out	0x24, r24	; 36
 144:	08 95       	ret

00000146 <TC0_NOPRESCALING>:
 146:	85 b5       	in	r24, 0x25	; 37
 148:	8b 7f       	andi	r24, 0xFB	; 251
 14a:	85 bd       	out	0x25, r24	; 37
 14c:	85 b5       	in	r24, 0x25	; 37
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	85 bd       	out	0x25, r24	; 37
 152:	85 b5       	in	r24, 0x25	; 37
 154:	81 60       	ori	r24, 0x01	; 1
 156:	85 bd       	out	0x25, r24	; 37
 158:	08 95       	ret

0000015a <main>:
int main(void)
{
    //FAST PWM  TOP 0xFF
    //NON-INVERTING
    //No Prescaling
    TC0_FAST_PWM_D_TOP();
 15a:	0e 94 9c 00 	call	0x138	; 0x138 <TC0_FAST_PWM_D_TOP>
    TCCR0A |= (1<<COM0A1);
 15e:	84 b5       	in	r24, 0x24	; 36
 160:	80 68       	ori	r24, 0x80	; 128
 162:	84 bd       	out	0x24, r24	; 36
    TC0_NOPRESCALING();
 164:	0e 94 a3 00 	call	0x146	; 0x146 <TC0_NOPRESCALING>
    //Initially at 50% duty cycle
    OCR0A = 128;
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	87 bd       	out	0x27, r24	; 39

	void (*currentState)();
	currentState = mymainMenu;

	for(;;){
		(*currentState)();
 16c:	0e 94 7a 00 	call	0xf4	; 0xf4 <mymainMenu>
 170:	fd cf       	rjmp	.-6      	; 0x16c <main+0x12>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
